// TODO: Copy these rules to Firebase Console > Firestore Database > Rules
// These are basic rules - adjust based on your app's requirements

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);
      
      // Users can update their own profile
      allow update: if isOwner(userId) && 
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'admin']);
      
      // Only admins can create or delete users
      allow create, delete: if isAdmin();
    }
    
    // Example: Projects collection (adjust based on your needs)
    match /projects/{projectId} {
      // Anyone authenticated can read
      allow read: if isAuthenticated();
      
      // Only authenticated users can create
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      // Only project owner can update
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Only project owner or admin can delete
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Example: Public content
    match /public/{document=**} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Default: deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// TODO: Important Security Notes:
// 1. Never allow unrestricted write access
// 2. Always validate data types and required fields
// 3. Use custom claims for role-based access (set via Admin SDK)
// 4. Test rules thoroughly using Firebase Emulator
// 5. Monitor usage in Firebase Console > Firestore > Usage