// TODO: Copy these rules to Firebase Console > Storage > Rules
// These are basic rules - adjust based on your app's requirements

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') && 
             request.resource.size < 5 * 1024 * 1024; // 5MB max
    }
    
    function isValidDocument() {
      return request.resource.contentType.matches('application/pdf') && 
             request.resource.size < 10 * 1024 * 1024; // 10MB max
    }
    
    // User profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Public profiles
      allow write: if isOwner(userId) && isValidImage();
      allow delete: if isOwner(userId);
    }
    
    // User private files
    match /users/{userId}/private/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && 
        (isValidImage() || isValidDocument());
      allow delete: if isOwner(userId);
    }
    
    // Public uploads (e.g., blog images)
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated() && isValidImage();
      allow delete: if request.auth.token.admin == true;
    }
    
    // Project files
    match /projects/{projectId}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.auth.uid == resource.metadata['uploadedBy'];
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.metadata['uploadedBy'];
    }
    
    // Default: deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

// TODO: Important Storage Security Notes:
// 1. Always validate file types and sizes
// 2. Use metadata to track upload ownership
// 3. Consider using Cloud Functions for virus scanning
// 4. Implement proper CORS configuration
// 5. Use signed URLs for temporary access to private files
// 6. Monitor storage usage and costs